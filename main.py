
import sqlite3
import logging
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=Config.BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('school_data.db')
    cur = conn.cursor()
    cur.execute('''
    CREATE TABLE IF NOT EXISTS students (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        age INTEGER NOT NULL,
        grade TEXT NOT NULL
    )
    ''')
    conn.commit()
    conn.close()


# –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
init_db()


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class Form(StatesGroup):
    name = State()
    age = State()
    grade = State()


# –ö–æ–º–∞–Ω–¥–∞ /start - –Ω–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞
@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞. –ö–∞–∫ –∑–æ–≤—É—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞?")
    await state.set_state(Form.name)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
@dp.message(Form.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üìù –û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ –ª–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç—É?")
    await state.set_state(Form.age)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
@dp.message(Form.age)
async def process_age(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑—Ä–∞—Å—Ç - —á–∏—Å–ª–æ
    if not message.text.isdigit():
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
        return

    await state.update_data(age=int(message.text))
    await message.answer("üè´ –í –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ —É—á–∏—Ç—Å—è —Å—Ç—É–¥–µ–Ω—Ç? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10–ê)")
    await state.set_state(Form.grade)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞—Å—Å–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
@dp.message(Form.grade)
async def process_grade(message: Message, state: FSMContext):
    await state.update_data(grade=message.text)
    user_data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    try:
        conn = sqlite3.connect('school_data.db')
        cur = conn.cursor()
        cur.execute('''
        INSERT INTO students (name, age, grade) 
        VALUES (?, ?, ?)
        ''', (user_data['name'], user_data['age'], user_data['grade']))
        conn.commit()
        conn.close()

        await message.answer(
            f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
            f"üë§ –ò–º—è: {user_data['name']}\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_data['age']}\n"
            f"üè´ –ö–ª–∞—Å—Å: {user_data['grade']}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


# –ö–æ–º–∞–Ω–¥–∞ /view - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
@dp.message(Command("view"))
async def view_students(message: Message):
    try:
        conn = sqlite3.connect('school_data.db')
        cur = conn.cursor()
        cur.execute("SELECT * FROM students")
        students = cur.fetchall()
        conn.close()

        if not students:
            await message.answer("üì≠ –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
            return

        response = "üìö –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:\n\n"
        for student in students:
            response += (
                f"ID: {student[0]}\n"
                f"üë§ –ò–º—è: {student[1]}\n"
                f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {student[2]}\n"
                f"üè´ –ö–ª–∞—Å—Å: {student[3]}\n"
                f"-----------------------\n"
            )

        await message.answer(response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–∑ –ë–î: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")


# –ö–æ–º–∞–Ω–¥–∞ /help
@dp.message(Command("help"))
async def help_cmd(message: Message):
    help_text = (
        "üìö –®–∫–æ–ª—å–Ω—ã–π –±–æ—Ç - –ü–æ–º–æ—â—å\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞\n"
        "/view - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /start –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
    )
    await message.answer(help_text)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
